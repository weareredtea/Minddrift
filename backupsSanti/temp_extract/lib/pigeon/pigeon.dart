// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names

import 'dart:async';
import 'package:flutter/services.dart';

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else {
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Data class representing a user in a room.
class PigeonUserDetails {
  PigeonUserDetails({
    required this.uid,
    required this.displayName,
    this.totalScore, // Added totalScore field
    this.tokens, // NEW: Added tokens field
  });

  String uid;
  String displayName;
  int? totalScore;
  int? tokens; // NEW: Field for tokens

  /// Converts this object to a Map for sending over the binary channel.
  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['uid'] = uid;
    pigeonMap['displayName'] = displayName;
    pigeonMap['totalScore'] = totalScore;
    pigeonMap['tokens'] = tokens; // NEW: Encode tokens
    return pigeonMap;
  }

  /// Reconstructs this object from a Map received over the binary channel.
  static PigeonUserDetails decode(Object result) {
    final Map<Object?, Object?> pigeonMap = result as Map<Object?, Object?>;
    return PigeonUserDetails(
      uid:         pigeonMap['uid']! as String,
      displayName: pigeonMap['displayName']! as String,
      totalScore:  pigeonMap['totalScore'] as int?,
      tokens:      pigeonMap['tokens'] as int?, // NEW: Decode tokens
    );
  }
}

/// Host API for managing rooms.
abstract class RoomApi {
  /// The codec used by this API.
  static const MessageCodec<Object?> codec = _PigeonCodec();

  /// Returns the list of users in the given room.
  Future<List<PigeonUserDetails>> getPlayers(String roomId);

  /// Sets up a handler for calls coming from the Flutter side.
  ///
  /// You must call this from your Android or iOS host code,
  /// passing in an implementation of [RoomApi].
  static void setup(RoomApi? api, {BinaryMessenger? binaryMessenger}) {
    final messenger = binaryMessenger ?? ServicesBinding.instance.defaultBinaryMessenger;

    // Register the handler for `getPlayers`
    {
      final channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.RoomApi.getPlayers',
        codec,
        binaryMessenger: messenger,
      );
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          try {
            final args = message as List<Object?>;
            final String roomIdArg = args[0]! as String;
            final List<PigeonUserDetails> result = await api.getPlayers(roomIdArg);
            // Encode the list of users as a list of Maps
            return result.map((e) => e.encode()).toList();
          } catch (error) {
            // In a real app youâ€™d send back error details here
            throw PlatformException(
              code: 'error',
              message: error.toString(),
            );
          }
        });
      }
    }
  }
}
