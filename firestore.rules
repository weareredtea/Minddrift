rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a player in the room
    function isPlayer(roomId) {
      return exists(/databases/$(database)/documents/rooms/$(roomId)/players/$(request.auth.uid));
    }

    // Helper function to check if a user is the creator of the room
    function isCreator(roomId) {
      return request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomId)).data.creator;
    }

    // Allow authenticated users to read and write their own user data
    // Also allow reading other users' basic profile info for leaderboards
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rooms collection - More robust rules with helper functions
    match /rooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;

      // Allow any player in the room OR the creator to update the room document.
      // This is crucial for things like changing room status, updating scores, etc.
      allow update: if request.auth != null && (isPlayer(roomId) || isCreator(roomId));

      // Only the creator can delete the entire room
      allow delete: if request.auth != null && isCreator(roomId);

      // --- Players Subcollection ---
      match /players/{playerId} {
        allow read: if request.auth != null;

        // A user can create their own player document OR the host can create bot documents.
        allow create: if request.auth.uid == playerId || 
                      (isCreator(roomId) && playerId == 'test-bot-001');

        // A user can update their own player document OR the host can update it.
        allow update: if request.auth.uid == playerId || isCreator(roomId);

        // A user can delete their own player document (to leave) OR the host can kick them.
        allow delete: if request.auth.uid == playerId || isCreator(roomId);
      }

      // --- Rounds Subcollection ---
      match /rounds/{roundId} { // Assuming roundId is 'current'
        allow read: if request.auth != null && isPlayer(roomId);

        // Allow any player to update the round OR the room creator to update on behalf of bots.
        // This is a broad rule for simplicity. You can make it more granular later
        // by checking for specific roles (e.g., only the navigator can write the 'clue' field).
        allow create, update: if request.auth != null && (isPlayer(roomId) || isCreator(roomId));

        // --- History Subcollection ---
        match /history/{historyId} {
          allow read: if request.auth != null && isPlayer(roomId);
          // Only the creator should be able to write to history (as part of a transaction).
          allow create: if request.auth != null && isCreator(roomId);
        }
      }
    }
    
    // Bundle rules - allow authenticated users to read bundles
    match /bundles/{bundleId} {
      allow read: if request.auth != null;
    }
    
    // User bundles rules - allow users to manage their own bundle purchases
    match /userBundles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Premium features rules
    match /premiumUsers/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat messages rules
    match /chat_messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.senderId;
    }
    
    // Custom usernames rules
    match /custom_usernames/{usernameId} {
      // Allow authenticated users to read all usernames (for availability checking)
      allow read: if request.auth != null;
      
      // Allow users to create new usernames
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // Allow users to update/delete their own usernames
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Custom avatars rules (for future custom avatar uploads)
    match /custom_avatars/{avatarId} {
      // Allow authenticated users to read avatars
      allow read: if request.auth != null;
      
      // Allow users to create/update/delete their own custom avatars
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Daily Challenge rules
    match /daily_challenges/{challengeId} {
      // Allow authenticated users to read daily challenges
      allow read: if request.auth != null;
      // Allow Cloud Functions (with admin token) or authenticated users to write daily challenges
      // This allows fallback client-side generation if Cloud Function fails
      allow create, update: if request.auth != null;
    }
    
    // Daily Challenge Leaderboard rules
    match /daily_leaderboard/{challengeId} {
      // Allow authenticated users to read leaderboards
      allow read: if request.auth != null;
      
      // Scores subcollection
      match /scores/{userId} {
        // Allow authenticated users to read all scores
        allow read: if request.auth != null;
        // Allow users to create/update their own score
        allow create, update: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Daily Challenge Results rules
    match /daily_results/{userId} {
      // Allow users to read/write their own results
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Results subcollection
      match /results/{resultId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Daily Challenge Stats rules
    match /daily_stats/{userId} {
      // Allow users to read/write their own stats
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Practice Mode Stats rules
    match /practice_stats/{userId} {
      // Allow users to read/write their own practice stats
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Results subcollection
      match /results/{resultId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Campaign Progress rules
    match /campaign_progress/{userId} {
      // Allow users to read/write their own campaign progress
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Campaign Results rules
    match /campaign_results/{userId} {
      // Allow users to read/write their own campaign results
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Levels subcollection
      match /levels/{levelId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Player Wallet rules
    match /player_wallets/{userId} {
      // Allow users to read/write their own wallet
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Gem Transaction rules
    match /gem_transactions/{userId} {
      // Allow users to read/write their own transaction history
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Transactions subcollection
      match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Quest Progress rules
    match /quest_progress/{userId} {
      // Allow users to read/write their own quest progress
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Active quests subcollection
      match /active_quests/{questId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Completed quests subcollection
      match /completed_quests/{questId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Quest Statistics rules
    match /quest_stats/{userId} {
      // Allow users to read/write their own quest statistics
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Artifacts collection rules (for current room tracking)
    match /artifacts/{appId} {
      // Allow authenticated users to read artifacts
      allow read: if request.auth != null;
      
      // User settings subcollection
      match /users/{userId} {
        // Allow users to read their own settings
        allow read: if request.auth != null && request.auth.uid == userId;
        
        // Settings subcollection
        match /settings/{settingId} {
          // Allow users to read/write their own settings
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }
  }
}
